(* ==unary== 
***unary***
a **unary** function only takes **1** argument
#Example:#
    > zero? 3           **zero? only takes one argument**
    > false : Boolean
    > zero? 3 4         **doesn't make any sense!**
however
    > zero? (3 - 3)     **this is ok**
    > true : Boolean
*)

(* 
==binary==
***binary***
A **binary function** accepts only two arguments. A example would be __const__
#Example:#
    > const "hello" "there"
    > "hello" : String
A **binary number** is a base 2 number composed only of 0s and 1s. In microML we 
enter them like this:
#Example:#
    > 1001001
    > 73 : Number
see __octal__ and __hex__
*)

(*
==polymorphic==
***polymorphism***
a polymorphic function can take arguments of more than one type
#Example:#
    > id :: a -> a
    > id 3
    > 3
    > id 'a'
    > a
We do not need to write separate id functions for every possible type of input. Compare this with C
where we would need a different function of the different inputs.
*)

(*
==boolean==
***boolean***
a true or false value
*)
(*
==hof==
***higher order function***
a higher order function is a function that does one (or both) of the two following things
    > takes one or more functions as arguments (c.f flip)
    > return a function as a result
The second example needs a little more explanation...
#Example:#
    > let twice f x = f (f x)       **this is including in the standard library**
    > let add3 x = x + 3
    > let g = twice add3            **g is also a higher order function!**
    > g
    > <<closure>> : Number -> Number
    > g 7
    > 13 : Number
*)

(* 
==id==
***id***
** id :: a -> a **
id is a __unary__ function. It returns what was given to it without changes, throwing away extra arguments
#Example:#
    > id 5
    > 5 : Number
    > id 'a'
    > a : Char
*)
let id x = x

(* 
==zero?== 
***zero?*** 
** zero? :: Number -> Boolean ** 
zero checks if a number or value is equal to 0
#Example:#
    > let x = 1
    > zero? x
    > false : Boolean
*)
let zero? x = if x == 0 then true else false

(*
==odd?==
***odd?***
** odd? :: Number -> Boolean **
odd? checks if a number is odd, returning a __boolean__ value.
#Example:#
    > odd? 5
    > true : Boolean
    > odd? 4
    > false : Boolean
*)
let odd? x = if x % 2 == 1 then true else false

(*
==even?==
***even?***
** even? :: Number -> Boolean **
even? checks if a number is even, returning a __boolean__ value.
#Example:#
    > even? 4
    > true : Boolean
    > even? 5
    > false : Boolean
*)
let even? x = if x % 2 == 0 then true else false

(*
==positive?==
***positive?***
** positive? :: Number -> Boolean **
positive? checks if a number is greater than or equal to 0, returning a __boolean__ value.
#Example:#
    > positive? 4
    > true : Boolean
    > positive? (-5)
    > false : Boolean
*)
let positive? x = if x >= 0 then true else false

(*
==negative?==
***negative?***
** negative? :: Number -> Boolean **
negative? checks if a number is less than 0, returning a __boolean__ value.
#Example:#
    > negative? (-4)
    > true : Boolean
    > negative? 5
    > false : Boolean
*)
let negative? x = if x < 0 then true else false

(*
==show==
***show***
** show :: for all a. a -> String **
show takes a value and returns it as a string
#Example:#
    > show 3
    > "3" : String
    > show 'a'
    > "a" : String
*)
let show x = _show x

(*
==read==
***read***
** read :: String -> Number **
read takes a string of a number and returns something of type number
#Example:#
    > read "3"
    > 3 : Number
    > read "3.3"
    > 3.3 : Number
*)
let read x = _read x

(* 
==const==
***const***
** const :: for all a b. a -> b -> a **
const return only the first of its two arguments, throwing the second away
#Example:#
    > const 3 4
    > 3 : Number
    > const 'a' "hello"
    > 'a' : Char
Note that const is __polymorphic__: it can take two arguments of any type, the same or different.
*)
let const x y = x

(*
==succ==
***succ***
** succ :: Number -> Number **
succ adds one to a number
#Example:#
    > succ 3
    > 4 : Number
*)
let succ x = x + 1

(*
==flip==
***flip***
** flip :: for all a b c. (a -> b -> c) -> b -> a -> c **
flip is a __hof__ (higher order function). Its first argument is a function which takes two arguments.
Flip changes the order of the aruments.
#Example:#
    > let sub a b = a - b
    > sub 3 4
    > -1 : Number
    > flip sub 3 4
    > 1 : Number
*)
let flip f = \x y -> f y x

(*
==twice==
***twice***
** twice :: for all a. (a -> a) -> a -> a **
twice takes a function and a value and applies the function to it twice
#Example:#
    > twice succ 4
    > 6 : Number
Why 6?
    > succ 5        **the first time through the function**
    > 5         
    > succ 5        **the second application of succ, this time with the new value**
    > 6
*)
let twice f x = f (f x)

(*
==pipe==
***pipe***
** pipe : for all a b. a -> (a -> b) -> b **
pipe takes a value and **pushes it through** a function (reading from left to right). 
#Example:#
    > pipe 5 succ
    > 6 : Number
    > pipe 5 (twice succ)
    > 7 : Number
*)
let pipe x f = f x

(*
==compose==
***compose***
** compose : for all a b c. (a -> b) -> (c -> a) -> c -> b **
compose takes two functions and a value, passing the value through both functions (reading from
right to left).
#Example:#
    > compose double succ 4
    > 10 : Number
What has happened here?
    > succ 4        **succ is applied to the value 4**
    > 5             **the result is 5**
    > double 5      **5 is then passed to double**
    > 10            **and the result is 10**
*)
let compose f g x = f (g x)

(*
==empty?==
***empty?***
** empty? :: [a] -> Boolean **
A shortcut for **if xs == []**. Helpful when defining a __recursive__ function on a list.
*)
let empty? xs = if xs == [] then true else false

(*
==length==
***length***
** length :: [a] -> Number **
returns the length of a list
#Example:#
    > length [1 to 5]
    > 5 : Number
    > length ['a', 'b', 'c']
    > 3 : Number
*)
let length xs = if empty? xs then 0 else 1 + (length (tail xs))

(*
==drop==
***drop***
** drop :: Number -> [a] -> [a] **
drops the specified number from the start of a list. The opposite of __take__
#Example:#
    > drop 2 [1 to 5]
    > [3,4,5] : [Number]
*)
let drop n xs = if zero? n then xs else if (length xs) < n then [] else (drop (n-1) (tail xs))

(* 
==take==
***take***
** take :: Number -> [a] -> [a] **
takes the specified number from the start of the list, dropping the rest
#Example:#
    > take 2 [1 to 5]
    > [1,2] : Number
*)
let take n xs = if zero? n then [] else ((head xs) : (take (n-1) (tail xs)))

(*
==dropEvery==
***dropEvery***
** dropEvery :: Number -> [a] -> [a] **
drops every nth element from a list
#Example:#
    > dropEvery 2 [1 to 10] ** drops every 2nd element from the list **
    > [1, 3, 5, 7, 9] : [Number]
*)
let dropEvery n xs = if xs == [] then [] else (head xs) : (dropEvery n (drop n xs))

(*
==foldr==
***foldr***
** foldr :: (a -> b -> b) -> b -> [a] -> b **
performs a right __fold__ on a list
you can see precisely what foldr is doing with the following function
#Example:#
    > foldr (λx y -> "(" ++ x ++ " + " ++ y ++ ")") "0" (map show [1 to 5])
    > "(1 + (2 + (3 + (4 + (5 + 0)))))"
*)
let foldr f acc xs = if empty? xs then acc else ((f (head xs)) (foldr f acc (tail xs)))

(*
==foldl==
***foldl***
** foldl :: (b -> a -> b) -> b -> [a] -> b **
performs a left __fold__ on a list
you can see precisely what foldl is doing with the following function
#Example:#
    > foldl (λx y -> "(" ++ x ++ " + " ++ y ++ ")") "0" (map show [1 to 5])
    > "(((((0 + 1) + 2) + 3) + 4) + 5)"
*)
let foldl f acc xs = if empty? xs then acc else (foldl f (f acc (head xs)) (tail xs))

(*
==foldr1==
***foldr1***
** foldr1 :: (a -> a -> a) -> [a] -> a **
*)
let foldr1 f xs = foldr f (head xs) xs

(*
==foldl1==
***foldl1***
** foldl1 :: (a -> a -> a) -> [a] -> a **
*)
let foldl1 f xs = foldl f (head xs) xs

(*
==scanl==
***scanl***
** scanl :: (b -> a -> b) -> b -> [a] -> [b] **
*)
let scanl f x xs = if empty? xs then [] else x : (scanl f (f x (head xs)) (tail xs))

(*
==scanl1==
***scanl1***
** scanl1 :: (b -> a -> b) -> b -> [a] -> [b] **
*)
let scanl1 f xs = scanl f (head xs) (tail xs)

(*
==scanr==
***scanr***
** scanr :: (a -> b -> b) -> b -> [a] -> [b] **
*)
let scanr f x xs = if empty? xs then [] else (f (head xs) x) : (scanr f x (tail xs))

(*
==map==
***map***
** map :: (a -> b) -> [a] -> [b] **
performs the function (a -> b) on every element of the list [a]. Easier to see with an example.
#Example:#
    > let succ x = x + 2
    > map pow [1 to 5]
    > [2, 4, 6, 8, 10] : [Number]
    > map (λx -> chr x) [109, 105, 99, 114, 111, 77, 76]
    > "microML" : String
*)
let map f xs = foldr (\x xs' -> (f x) : xs') [] xs

(*
==filter==
***filter***
** filter :: (a -> Boolean) -> [a] -> [a] **
*)
let filter p xs = foldr (\x y -> if (p x) then (x:y) else y) [] xs

(*
==init==
***init***
** init :: [a] -> [a] **
*)
let init xs = let l = (length xs) - 1 in if l == -1 then [] else take l xs

(*
==reverse==
***reverse***
** reverse :: [a] -> [a] **
*)
let reverse xs = foldl (\x y -> y : x) [] xs

(*
==last==
***last***
** last :: [a] -> a **
*)
let last xs = let l' = reverse xs in head l'

(*
==quicksort==
***quicksort***
** quicksort :: [a] -> [a] **
sorts a list in ascending order, using the quicksort algorithm
#Example:#
    > quicksort [7,4,5,2,8,1,10,3,6,9]
    > quicksort [1,2,3,4,5,6,7,8,9,10]
*)
let quicksort xs = let smaller = \xs -> filter (\x -> x < head xs) (tail xs) in let greater = \xs -> filter (\x -> x >= head xs) (tail xs) in if xs == [] then [] else (quicksort (smaller xs)) ++ [head xs] ++ (quicksort (greater xs))

(*
==merge==
***merge***
** merge [a] -> [a] -> [a] **
merge is a helper function for mergesort
*)
let merge = \xs ys ->  if ys == [] then xs else if xs == [] then ys else if (head xs) <= (head ys) then (head xs):(merge (tail xs) ys) else (head ys):(merge xs (tail ys)) 

(*
==mergesort==
***mergesort***
** mergesort :: [a] -> [a] **
sorts a list in ascending order, using the mergesort algorithm
#Example:#
    > mergesort [7,4,5,2,8,1,10,3,6,9]
    > mergesort [1,2,3,4,5,6,7,8,9,10]
*)
let mergesort xs = let fsthalf = \xs -> take ((length xs) // 2) xs in let sndhalf = \xs -> drop ((length xs) // 2) xs in if xs == [] then [] else if (length xs) == 1 then xs else merge (mergesort (fsthalf xs)) (mergesort (sndhalf xs))
