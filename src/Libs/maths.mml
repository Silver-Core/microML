----------------------------
-- MATHS STANDARD LIBRARY --
----------------------------
-- constants
(*
==pi==
***pi π***
the constant, π
3.14159265359
*)
let pi = 3.14159265359

(*
==e==
***e***
euler's number
2.718281828459
*)
let e  = 2.718281828459

(*
==abs==
***abs***
** abs :: Number -> Number **
gets the absolute value of a number: that is, its distance from zero. As a result, it is always
positive
#Example:#
    > abs 3
    > 3 : Number
    > abs (-3)      ** note the use of the parentheses! **
    > 3 : Number
*)
let abs x     = if x > 0 then x else x * (-1)

(*
==negate==
***negate***
** negate :: Number -> Number **
*)
let negate x  = if x < 0 then abs x else x * -1

(*
==max==
***max***
** max :: Number -> Number -> Number **
*)
let max a b   = if (a + 0) < (b + 0) then b else a

(*
==min==
***min***
** min :: Number -> Number -> Number **
*)
let min a b   = if (a + 0) < (b + 0) then a else b
(*
==intToFloat==
***intToFloat***
** intToFloat :: Number -> Number **
*)
let intToFloat x = x + 0.0

(*
==reciprocal==
***reciprocal***
** reciprocal :: Number -> Number **
*)
let reciprocal x = 1 / x

(*
==square==
***square***
** square :: Number -> Number **
*)
let square a = a * a

(*
==sqrt==
***sqrt***
** sqrt :: Number -> Number **
*)
let sqrt x = x^0.5

(*
==sum==
***sum***
** sum :: [Number] -> Number **
*)
let sum xs = foldr (\x y -> x + y) 0 xs

(*
==product==
***product***
** product :: [Number] -> Number **
*)
let product xs = foldr (\x y -> x * y) 1 xs

(*
==floor==
***floor***
** floor :: Number -> Number **
*)
let floor x = x // 1

(*
==ceiling==
***ceiling***
** ceiling :: Number -> Number **
*)
let ceiling x = 1 + (floor x)

(*
==floatToInt==
***floatToInt***
** floatToInt :: Number -> Number **
*)
let floatToInt x = floor x

(*
==ln==
***ln***
** ln :: Number -> Number **
the natural log of a number
*)
let ln x        = _log x

(*
==log2==
***log2***
** log2 :: Number -> Number **
the base 2 log of a number
*)
let log2 x      = _log x / _log x

(*
==log10==
***log10***
** log10 :: Number -> Number **
the base 10 log of a number
*)
let log10 x     = _log x / _log 10

(*
==logBase==
***logBase***
** logBase :: Number -> Number **
the log of a number at any base you like!
*)
let logBase x y = 
    let y' = y + 0 in
    _log y' / _log x

(*
==fib==
***fibonacci***
** fib :: Number -> Number **
*)
let fib n = if n < 2 then 1 else (fib (n-1)) + (fib (n-2))

(*
==factorial==
***factorial***
** factorial :: Number -> Number **
finds the factorial (!) of a number
#Example:#
    > factorial 5      ** 5! in maths notation **
    > 120 : Number
factorials grow really quickly...
    > factorial 10
    > 3628800 : Number
*)
let factorial n = product [1 to n];

(*
==sin==
***sin***
** sin :: Number -> Number **
finds the sine of an angle (using the Taylor series)
*)
let sin x = 
    if x == 90 then 1 -- because of rounding errors, let's cheat a little here
    else if x == 180 then 0
    else let y = (x / 180) * pi 
          in y - (y^3 / 6) + (y^5 / 120) - (y^7 / 5070) + (y^9 / 362880) - (y^11 / 39916800) 
          -- hard code the factorials for efficiency

(*
==cos==
***cosine***
** cos :: Number -> Number **
finds the cosine of an angle (using the Taylor series)
*)
let cos x = 
    if x == 180 then (-1)
    else sin (90 - x)

(*
==tan==
***tan***
** tan :: Number -> Number **
tan of an angle 
** tan x = sin x / cos x **
*)
let tan x = (sin x) / (cos x)

(*
==gcd==
***greatest common divisor***
** gcd :: Number -> Number -> Number **
finds the greatest common divisor of two numbers
*)
let gcd a b = if a == b then a else if a < b then gcd b a else gcd b (a-b)
