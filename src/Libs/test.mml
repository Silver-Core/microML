(* 
==id==
***         id          ***
** id :: a -> a **
id returns what was given to it, throwing away extra arguments
#Example:#
    > id 5
    > 5 : Number
    > id 'a'
    > a : Char
*)
let id x = x
(* 
==compose== 
***     compose     ***
** compose :: (b -> c) -> (a -> b) -> a -> c**
compose takes two __unary__ functions and links the results together
like this: a to a1 to a2
#Example:#
    > compose succ succ 3 
    > 5 : Number

It works like this:
    result = 5 <- (succ 4 = 5) <- (succ 3 = 4) <- 3
*)
let compose x y z = x (y z)
